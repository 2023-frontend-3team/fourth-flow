1. 리액트의 작동 원리
  - 리액트는 SPA => single page application으로 index.html 파일이 하나와 App.js라는 스크립트 파일 하나로 로드
  => 이때 동작을 도와주는 것이 webpack(번들러)으로 웹이 동작되는데 필요한 자원들을 하나로 묶고 조합해서 하나의 정적 페이지를 만듦

  - 모든 요청은 client가 수행함 (CSR)
  - React에는 state (상태 값)이 존재하는데 상태값이 변경될 때, Virtual Dom (가상돔) 통해 화면을 그린다.
    Virtual Dom (가상돔)
        - 객체 형태로 실제 돔을 복제하여 랜더링할떄마다 새로운 가상돔 생성
        - 가상돔에서 개발자가 수정하고 싶은 부분만 수정이 가능함

2. 리액트의 장점
    - UI 수정과 재사용성이 좋고, 코드 가독성을 높일 수 있다.
    - 화면을 조각을 내서 랜더 하는 리액트의 동작 방식으로 인해 VDOM 을 통해 달라진 부분만 다시 랜더 할 수 있어서 훨씬 빠른 속도로 랜더 가능하다
      (첫랜더링 이후 빠른 렌더링 가능) [https://ko.legacy.reactjs.org/docs/reconciliation.html (vdom과 dom 의 Diffing algorithm)]
    - 서버의 부담이 월등히 줄어든다 
    - 리액트를 사용하는 개발자들의 커뮤니티가 굉장히 활발하기 때문에, 리액트를 공부하는데 있어서 많은 도움을 받을 수 있다. (예시) [https://github.com/facebook/react]

    [예시]
    <함수형 컴포넌트>
    function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
    }
    // Welcome은 함수형 컴포넌트로, props를 인수로 받아 React 요소를 반환합니다.

3. 리액트의 단점
    - 리액트는 CSR(Client side render)로 사용자 측에서 랜더링을 하기떄문에 이므로 모든 파일을 업로드 해주므로 로딩 시간이 길다
    - 사용자의 하드웨어에 의존하여 화면을 랜더하면 랜더 시간이 길어질 수 있음
