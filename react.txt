1.React란?
-사용자 인터페이스를 만들기 위한 JavaScript 라이브러리
-웹/앱의 view를 쉽게 구축하기 위한 라이브러리

2.React특징
-선언형이다 (자세한 방법을 모르더라도 메서드를 통해 예측->가독성이 좋고 편리함)
-CSR(사용자 측에서 화면을 랜더링하여 첫렌더링 이후 화면전환 빠름)
-SPA(페이지가 하나인 웹)
-자바스크립트와 호환이된다(JSX)
-컴포넌트(독립적인 단위의 소프트웨어 모듈) 기반으로 재사용성이 용이하다.
-가상돔을 사용하여 Dom 전체를 리랜더하는게 아닌 변경된 부분만 리랜더하기 때문에 속도가 빠르다.
-첫 접속 시 느리고 후에 다른 페이지를 랜딩 할때 빠르게 보여준다

3.React의 작동원리
    클라이언트와 서버의 요청(필요시 동적 api call), 
    응답(index.html + app.js), weppack(js,css,font,image등등...)

4.React의 장단점

    장점)
    - 풍부한 생태계, 방대한 자료를 통해 쉽게 접할수 있다.
    - 자바스크립트 기반의 문법을 사용한다. -
    - CSR , SSR둘다 지원한다. - 
    - UL수정과 재사용이 좋고 코드 가독성이 좋다 - 
    

    
    단점)
    - 초기 랜더링 속도가 느리다.
    - 사용자의 컴퓨터 사양에 의존해서 화면을 랜더한다
    - 마음이 어렵다
    - SEO(검색 엔진 최적화 -> 검색 순위가 올라가는데 있어서 CSR하는데 상당히 안좋다)가 최적화 되는데 상당히 불리하다
    - 앱의 규모가 커지면 속도가 느려진다
    
==============================================================
var arr = [1,2,3,4,5];,
    arr2 = []
for(var i=0; i<arr.length; i++){
	arr2[i] = arr[i]*2;
}
console.log('a', arr2);


--------------선언형-----------------------------------------


var arr = [1,2,3,4,5];
arr2 = arr.map(function(v,i){return v*2});
console.log('b', arr2);


=============================================================

- React 의 JSX 를 사용 할 경우.
<div>Hello, {name}</div>

- React 를 사용하지 않는 경우.
let name = 'React';
let div = document.createElement('div');
div.textContent = 'Hello' + name;

- 소스의 간결함.
- 가독성 향상.


=============================================================

//함수형 컴포넌트  (MyComponent.js)
import React from 'react';

function MyComponent(props) {
	return <div>Hello, {props.name}</div>;
}
export default MyComponent;   // 다른 js 파일에서 불러 올 수 있도록 export

---------------------------------------------------------------------------------------

=> 만들어 놓은 Component 를 불러와서 사용. (App.js)

import React, { Component } from 'react'; // 리액트를 구현할 수 있는 플러그인을 연결
import MyComponent from './component/MyComponent';
// JS파일에 외부 파일을 불러오는 것이기 때문에 "import" 키워드를 사용한다. 
// 같은 JS파일은 확장자를 사용하지 않는다. 

function App() {
  return (
    <div>
      <MyComponent /> <!-- 만들어 놓은 Component 호출 -->
    </div>
  );
}

export default App; 

컴포넌트를 만들어 여러 곳에서 재사용 할 수 있다.


============================================================================

